@prefix rml: <http://semweb.mmlab.be/ns/rml#>.
@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix ql: <http://semweb.mmlab.be/ns/ql#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix madsrdf: <http://www.loc.gov/mads/rdf/v1#>.
@prefix ex: <http://example.org/rules/>.
@prefix schema: <http://schema.org/>.
@prefix dbo: <http://dbpedia.org/ontology/>.
@prefix bf: <http://id.loc.gov/ontologies/bibframe/>.
@prefix rdae: <http://rdaregistry.info/Elements/e/>.
@prefix rdaw: <http://rdaregistry.info/Elements/w/>.
@prefix uwx: <https://doi.org/10.6069/uwlib.55.d.4#>.
@prefix ns5: <http://www.loc.gov/mads/rdf/v1#>.
@prefix rdam: <http://rdaregistry.info/Elements/m/>.
@prefix ns7: <http://rdaregistry.info/Elements/m/datatype/>.
@prefix rdai: <http://rdaregistry.info/Elements/i/>.
@prefix rdau: <http://rdaregistry.info/Elements/u/>.
@prefix bflc: <http://id.loc.gov/ontologies/bflc/>.
@prefix sin: <http://sinopia.io/vocabulary/>.
@prefix ns12: <http://uw.edu/adaptationProperties/p/w/>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix skos: <http://www.w3.org/2004/02/skos/core#>.

ex:WorkMap a rr:TriplesMap;
  rml:logicalSource [
    rml:source "/home/mcm104/rml/rdfxml/data/work/8ab49fc5-0df2-4ee3-8c63-69cf51cf65b8.xml";
    rml:referenceFormulation ql:XPath;
    rml:iterator "/*[name()='rdf:RDF']/*[name()='rdf:Description'][type/@resource='http://rdaregistry.info/Elements/c/C10001']"
      # look for data chunks that are typed as an RDA Work
  ].

  ex:WorkMap rr:subjectMap [
    rml:reference "@*[name()='rdf:about']";
      # within the data chunk typed as an RDA work, look for any node with attribute "rdf:about"
# This could be made more specific to look for the trellis URI, but if we're only looking in the block that contains rdf:type rda:Work (see iterator), then this is sufficient to find the trellis URI on its own
    rr:class bf:Work
  ].

  ex:WorkMap rr:predicateObjectMap [
    rr:predicate bf:subject;
    rr:objectMap [
      rr:parentTriplesMap ex:SubjectLiteralMap
    ]
  ].

  ex:WorkMap rr:predicateObjectMap [
    rr:predicate bf:subject;
    rr:objectMap [
      rml:reference "*[name()='rdaw:P10256']/@*[name()='rdf:resource']";
        # within the data chunk typed as an RDA work, look for the node "rdaw:P10256" that has the attribute "rdf:resource"
      rr:termType rr:IRI
    ]
  ].

ex:SubjectLiteralMap a rr:TriplesMap;
  #NOTE: fix XPaths so only one bnode generates, depending on whether it's an IRI or a literal
  rml:logicalSource [
    rml:source "/home/mcm104/rml/rdfxml/data/work/8ab49fc5-0df2-4ee3-8c63-69cf51cf65b8.xml";
    rml:referenceFormulation ql:XPath;
    rml:iterator "/*[name()='rdf:RDF']/*[name()='rdf:Description'][P10256]"
      # look for data chunks that contain the node "P10256"
      # what it NEEDS to say is to look for data chunks that contain the node "P10256" WITHOUT the attribute "rdf:resource"
      # first try: [P10256][not(contains('http', @resource))]
        # so it works, it just doesn't do what I want it to do: if the data chunk contains ANY P10256 nodes with rdf:resource, then this won't generate, even if there are some that don't have rdf:resource...
      # second try: added it to the objectMap instead
        # same problem >:( BUT I DON'T GET WHY, it SHOULD be saying to select the value for all nodes P10256 that don't contain @resource=http, but it's doing the opposite where it's only collecting from the ones that don't have a literal value...?
      # third try: kept it in the objectMap but simplified it to [not(@resource)]
        # THIS WORKED WAIT WHAT, COOL, WHY DIDN'T IT WORK WHEN IT WAS MORE SPECIFIC, OH WELL I GUESS
  ].

  ex:SubjectLiteralMap rr:subjectMap [
      rr:termType rr:BlankNode;
      rr:class madsrdf:Authority
    ].

  ex:SubjectLiteralMap rr:predicateObjectMap [
    rr:predicate madsrdf:authoritativeLabel;
    rr:objectMap [
      rml:reference "*[name()='rdaw:P10256'][not(@resource)]";
        # within data chunks that contain the node "P10256", find the value for node "P10256"
      rr:termType rr:Literal
    ]
  ].
